{"ast":null,"code":"import React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Picker } from '@react-native-picker/picker';\nimport { useDispatch } from 'react-redux';\nimport * as animeAction from 'animo/redux/actions/animeAction';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar formSchema = yup.object({\n  genre1: yup.string().matches(/^(?!Select a Genre\\b)/i, 'Please select a genre.').notOneOf([yup.ref('genre2'), yup.ref('genre3')], \"Please select a genre that has not been selected.\"),\n  genre2: yup.string().matches(/^(?!Select a Genre\\b)/i, 'Please select a genre.').notOneOf([yup.ref('genre1'), yup.ref('genre3')], \"Please select a genre that has not been selected.\"),\n  genre3: yup.string().matches(/^(?!Select a Genre\\b)/i, 'Please select a genre.').notOneOf([yup.ref('genre1'), yup.ref('genre2')], \"Please select a genre that has not been selected.\")\n});\nvar Genres = [\"Select a Genre\", \"Action\", \"Adventure\", \"Comedy\", \"Drama\", \"Fantasy\", \"Horror\", \"Mystery\", \"Romance\", \"Sci-Fi\", \"Slice of Life\", \"Sports\", \"Supernatural\", \"Suspense\"];\n\nvar ChangeReccForm = function ChangeReccForm(props) {\n  var dispatch = useDispatch();\n  return _jsx(KeyboardAvoidingView, {\n    behavior: \"padding\",\n    keyboardVerticalOffset: 100,\n    children: _jsx(ScrollView, {\n      children: _jsx(Formik, {\n        initialValues: {\n          genre1: '',\n          genre2: '',\n          genre3: ''\n        },\n        validationSchema: formSchema,\n        onSubmit: function onSubmit(values) {\n          props.navigation.navigate('Home');\n          dispatch(animeAction.fetchRecommendedAnime(values));\n        },\n        children: function children(props) {\n          return _jsxs(View, {\n            style: styles.formContainer,\n            children: [_jsxs(View, {\n              style: styles.formGroup,\n              children: [_jsx(Text, {\n                style: styles.heading,\n                children: \"Most Preferred Genre\"\n              }), _jsx(Text, {\n                style: styles.error,\n                children: props.touched.genre1 && props.errors.genre1\n              }), _jsx(Picker, {\n                selectedValue: props.values.genre1,\n                onBlur: props.handleBlur('genre1'),\n                onValueChange: function onValueChange(item) {\n                  props.setFieldValue('genre1', item);\n                },\n                children: Genres.map(function (item, index) {\n                  return _jsx(Picker.Item, {\n                    label: item,\n                    value: item\n                  }, index);\n                })\n              })]\n            }), _jsxs(View, {\n              style: styles.formGroup,\n              children: [_jsx(Text, {\n                style: styles.heading,\n                children: \"Second Preferred Genre\"\n              }), _jsx(Text, {\n                style: styles.error,\n                children: props.touched.genre2 && props.errors.genre2\n              }), _jsx(Picker, {\n                selectedValue: props.values.genre2,\n                onBlur: props.handleBlur('genre2'),\n                onValueChange: function onValueChange(item) {\n                  props.setFieldValue('genre2', item);\n                },\n                children: Genres.map(function (item, index) {\n                  return _jsx(Picker.Item, {\n                    label: item,\n                    value: item\n                  }, index);\n                })\n              })]\n            }), _jsx(View, {\n              style: styles.buttonContainer,\n              children: _jsx(Button, {\n                style: styles.button,\n                title: \"Update Recommended\",\n                onPress: props.handleSubmit\n              })\n            })]\n          });\n        }\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  formContainer: {\n    margin: 20,\n    backgroundColor: '#ffffff',\n    padding: 20,\n    borderRadius: 10\n  },\n  formGroup: {\n    width: '100%'\n  },\n  heading: {\n    fontFamily: 'Futura'\n  },\n  input: {\n    paddingHorizontal: 2,\n    paddingVertical: 8,\n    borderBottomColor: '#ccc',\n    borderBottomWidth: 1\n  },\n  error: {\n    fontFamily: 'Futura',\n    fontSize: 8,\n    color: 'red'\n  },\n  buttonContainer: {\n    marginTop: 20\n  },\n  button: {}\n});\nexport default ChangeReccForm;","map":{"version":3,"sources":["/Users/inamorato/Desktop/animo_client/animo/components/settings/ChangeReccForm.js"],"names":["React","Formik","yup","Picker","useDispatch","animeAction","formSchema","object","genre1","string","matches","notOneOf","ref","genre2","genre3","Genres","ChangeReccForm","props","dispatch","values","navigation","navigate","fetchRecommendedAnime","styles","formContainer","formGroup","heading","error","touched","errors","handleBlur","item","setFieldValue","map","index","buttonContainer","button","handleSubmit","StyleSheet","create","margin","backgroundColor","padding","borderRadius","width","fontFamily","input","paddingHorizontal","paddingVertical","borderBottomColor","borderBottomWidth","fontSize","color","marginTop"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport {\n    StyleSheet,\n    View,\n    TextInput,\n    Text,\n    ScrollView,\n    Button,\n    KeyboardAvoidingView,\n    Alert,\n} from 'react-native';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Picker } from '@react-native-picker/picker';\nimport { useDispatch } from 'react-redux';\nimport * as animeAction from 'animo/redux/actions/animeAction';\n\nconst formSchema = yup.object({\n    genre1: yup.string()\n        .matches(/^(?!Select a Genre\\b)/i, 'Please select a genre.')\n        .notOneOf(\n            [\n                yup.ref('genre2'),\n                yup.ref('genre3'),\n            ], \"Please select a genre that has not been selected.\"\n        ),\n    genre2: yup.string()\n        .matches(/^(?!Select a Genre\\b)/i, 'Please select a genre.')\n        .notOneOf(\n            [\n                yup.ref('genre1'),\n                yup.ref('genre3'),\n            ], \"Please select a genre that has not been selected.\"\n        ),\n    genre3: yup.string()\n        .matches(/^(?!Select a Genre\\b)/i, 'Please select a genre.')\n        .notOneOf(\n            [\n                yup.ref('genre1'),\n                yup.ref('genre2'),\n            ], \"Please select a genre that has not been selected.\"\n        ),\n\n});\n\nconst Genres = [\n    \"Select a Genre\",\n    \"Action\",\n    \"Adventure\",\n    \"Comedy\",\n    \"Drama\",\n    \"Fantasy\",\n    \"Horror\",\n    \"Mystery\",\n    \"Romance\",\n    \"Sci-Fi\",\n    \"Slice of Life\",\n    \"Sports\",\n    \"Supernatural\",\n    \"Suspense\",\n]\n\n\nconst ChangeReccForm = props => {\n\n    const dispatch = useDispatch();\n    return (\n        <KeyboardAvoidingView\n            behavior='padding'\n            keyboardVerticalOffset={100}\n        >\n            <ScrollView>\n                <Formik\n                    initialValues={{\n                        genre1: '',\n                        genre2: '',\n                        genre3: '',\n                    }}\n                    validationSchema={formSchema}\n                    onSubmit={(values) => {\n                        props.navigation.navigate('Home')\n                        dispatch(animeAction.fetchRecommendedAnime(values))\n                        // .then(() => {\n                        //     Alert.alert('Success');\n                        // })\n                        // .catch(() => {\n                        //     Alert.alert('Failed')\n                        // })\n                    }}\n                >\n                    {props => (\n                        <View style={styles.formContainer}>\n                            <View style={styles.formGroup}>\n                                <Text style={styles.heading}>Most Preferred Genre</Text>\n                                <Text style={styles.error}>{props.touched.genre1 && props.errors.genre1}</Text>\n                                <Picker\n                                    selectedValue={props.values.genre1}\n                                    onBlur={props.handleBlur('genre1')}\n                                    onValueChange={(item) => {\n                                        props.setFieldValue('genre1', item)\n                                    }}\n                                >\n                                    {Genres.map((item, index) => {\n                                        return <Picker.Item label={item} value={item} key={index} />\n                                    })}\n                                </Picker>\n                            </View>\n                            <View style={styles.formGroup}>\n                                <Text style={styles.heading}>Second Preferred Genre</Text>\n                                <Text style={styles.error}>{props.touched.genre2 && props.errors.genre2}</Text>\n                                <Picker\n                                    selectedValue={props.values.genre2}\n                                    onBlur={props.handleBlur('genre2')}\n                                    onValueChange={(item) => {\n                                        props.setFieldValue('genre2', item)\n                                    }}\n                                >\n                                    {Genres.map((item, index) => {\n                                        return <Picker.Item label={item} value={item} key={index} />\n                                    })}\n                                </Picker>\n                            </View>\n                            <View style={styles.buttonContainer}>\n                                <Button\n                                    style={styles.button}\n                                    title='Update Recommended'\n                                    onPress={props.handleSubmit}\n                                />\n                            </View>\n                        </View>\n\n                    )}\n                </Formik>\n            </ScrollView>\n        </KeyboardAvoidingView>\n\n    );\n}\n\nconst styles = StyleSheet.create({\n    formContainer: {\n        margin: 20,\n        backgroundColor: '#ffffff',\n        padding: 20,\n        borderRadius: 10,\n    },\n    formGroup: {\n        width: '100%'\n    },\n    heading: {\n        fontFamily: 'Futura',\n    },\n    input: {\n        paddingHorizontal: 2,\n        paddingVertical: 8,\n        borderBottomColor: '#ccc',\n        borderBottomWidth: 1,\n    },\n    error: {\n        fontFamily: 'Futura',\n        fontSize: 8,\n        color: 'red'\n    },\n    buttonContainer: {\n        marginTop: 20,\n    },\n    button: {\n    },\n});\n\nexport default ChangeReccForm;"]},"metadata":{},"sourceType":"module"}